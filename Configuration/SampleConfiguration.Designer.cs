// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.6.0.0
//    <NameSpace>SimpleDICOMStorageService</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><BaseClassName>EntityBase</BaseClassName><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>All</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><InitializeFields>All</InitializeFields><GenerateAllTypes>True</GenerateAllTypes>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace SimpleDICOMStorageService
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Collections.Generic;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class simpleDICOMStorage
    {

        private List<simpleDICOMStorageListenersListener> listenersField;

        private List<simpleDICOMStorageSopClassSet> sopClassSetsField;

        private List<simpleDICOMStorageModalityRuleSet> modalityRuleSetsField;

        private List<simpleDICOMStorageStorageStrategy> storageStrategiesField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        private bool listenersFieldSpecified;

        private bool sopClassSetsFieldSpecified;

        private bool modalityRuleSetsFieldSpecified;

        private bool storageStrategiesFieldSpecified;

        public simpleDICOMStorage()
        {
            this.storageStrategiesField = new List<simpleDICOMStorageStorageStrategy>();
            this.modalityRuleSetsField = new List<simpleDICOMStorageModalityRuleSet>();
            this.sopClassSetsField = new List<simpleDICOMStorageSopClassSet>();
            this.listenersField = new List<simpleDICOMStorageListenersListener>();
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("listener", typeof(simpleDICOMStorageListenersListener), IsNullable = false)]
        public List<simpleDICOMStorageListenersListener> listeners
        {
            get
            {
                return this.listenersField;
            }
            set
            {
                this.listenersField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("sopClassSet", IsNullable = false)]
        public List<simpleDICOMStorageSopClassSet> sopClassSets
        {
            get
            {
                return this.sopClassSetsField;
            }
            set
            {
                this.sopClassSetsField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("modalityRuleSet", IsNullable = false)]
        public List<simpleDICOMStorageModalityRuleSet> modalityRuleSets
        {
            get
            {
                return this.modalityRuleSetsField;
            }
            set
            {
                this.modalityRuleSetsField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("storageStrategy", IsNullable = false)]
        public List<simpleDICOMStorageStorageStrategy> storageStrategies
        {
            get
            {
                return this.storageStrategiesField;
            }
            set
            {
                this.storageStrategiesField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(simpleDICOMStorage));
                }
                return serializer;
            }
        }

        [XmlIgnore()]
        public bool listenersSpecified
        {
            get
            {
                return this.listenersFieldSpecified;
            }
            set
            {
                this.listenersFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool sopClassSetsSpecified
        {
            get
            {
                return this.sopClassSetsFieldSpecified;
            }
            set
            {
                this.sopClassSetsFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool modalityRuleSetsSpecified
        {
            get
            {
                return this.modalityRuleSetsFieldSpecified;
            }
            set
            {
                this.modalityRuleSetsFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool storageStrategiesSpecified
        {
            get
            {
                return this.storageStrategiesFieldSpecified;
            }
            set
            {
                this.storageStrategiesFieldSpecified = value;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current simpleDICOMStorage object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an simpleDICOMStorage object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output simpleDICOMStorage object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out simpleDICOMStorage obj, out System.Exception exception)
        {
            exception = null;
            obj = default(simpleDICOMStorage);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out simpleDICOMStorage obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static simpleDICOMStorage Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((simpleDICOMStorage)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static simpleDICOMStorage Deserialize(System.IO.Stream s)
        {
            return ((simpleDICOMStorage)(Serializer.Deserialize(s)));
        }

        /// <summary>
        /// Serializes current simpleDICOMStorage object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an simpleDICOMStorage object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output simpleDICOMStorage object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out simpleDICOMStorage obj, out System.Exception exception)
        {
            exception = null;
            obj = default(simpleDICOMStorage);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out simpleDICOMStorage obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static simpleDICOMStorage LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class simpleDICOMStorageListenersListener
    {

        private simpleDICOMStorageListenersListenerStorage storageField;

        private ushort portField;

        private string aeTitleField;

        private string sopClassSetField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        private bool storageFieldSpecified;

        private bool portFieldSpecified;

        private bool aeTitleFieldSpecified;

        private bool sopClassSetFieldSpecified;

        public simpleDICOMStorageListenersListener()
        {
            this.storageField = new simpleDICOMStorageListenersListenerStorage();
        }

        public simpleDICOMStorageListenersListenerStorage storage
        {
            get
            {
                return this.storageField;
            }
            set
            {
                this.storageField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ushort port
        {
            get
            {
                return this.portField;
            }
            set
            {
                this.portField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string aeTitle
        {
            get
            {
                return this.aeTitleField;
            }
            set
            {
                this.aeTitleField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string sopClassSet
        {
            get
            {
                return this.sopClassSetField;
            }
            set
            {
                this.sopClassSetField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(simpleDICOMStorageListenersListener));
                }
                return serializer;
            }
        }

        [XmlIgnore()]
        public bool storageSpecified
        {
            get
            {
                return this.storageFieldSpecified;
            }
            set
            {
                this.storageFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool portSpecified
        {
            get
            {
                return this.portFieldSpecified;
            }
            set
            {
                this.portFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool aeTitleSpecified
        {
            get
            {
                return this.aeTitleFieldSpecified;
            }
            set
            {
                this.aeTitleFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool sopClassSetSpecified
        {
            get
            {
                return this.sopClassSetFieldSpecified;
            }
            set
            {
                this.sopClassSetFieldSpecified = value;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current simpleDICOMStorageListenersListener object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an simpleDICOMStorageListenersListener object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output simpleDICOMStorageListenersListener object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out simpleDICOMStorageListenersListener obj, out System.Exception exception)
        {
            exception = null;
            obj = default(simpleDICOMStorageListenersListener);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out simpleDICOMStorageListenersListener obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static simpleDICOMStorageListenersListener Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((simpleDICOMStorageListenersListener)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static simpleDICOMStorageListenersListener Deserialize(System.IO.Stream s)
        {
            return ((simpleDICOMStorageListenersListener)(Serializer.Deserialize(s)));
        }

        /// <summary>
        /// Serializes current simpleDICOMStorageListenersListener object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an simpleDICOMStorageListenersListener object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output simpleDICOMStorageListenersListener object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out simpleDICOMStorageListenersListener obj, out System.Exception exception)
        {
            exception = null;
            obj = default(simpleDICOMStorageListenersListener);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out simpleDICOMStorageListenersListener obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static simpleDICOMStorageListenersListener LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class simpleDICOMStorageListenersListenerStorage
    {

        private string rootField;

        private string maxDiskUsageField;

        private string strategyField;

        private string modalityRuleSetField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        private bool rootFieldSpecified;

        private bool maxDiskUsageFieldSpecified;

        private bool strategyFieldSpecified;

        private bool modalityRuleSetFieldSpecified;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string root
        {
            get
            {
                return this.rootField;
            }
            set
            {
                this.rootField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string maxDiskUsage
        {
            get
            {
                return this.maxDiskUsageField;
            }
            set
            {
                this.maxDiskUsageField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string strategy
        {
            get
            {
                return this.strategyField;
            }
            set
            {
                this.strategyField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string modalityRuleSet
        {
            get
            {
                return this.modalityRuleSetField;
            }
            set
            {
                this.modalityRuleSetField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(simpleDICOMStorageListenersListenerStorage));
                }
                return serializer;
            }
        }

        [XmlIgnore()]
        public bool rootSpecified
        {
            get
            {
                return this.rootFieldSpecified;
            }
            set
            {
                this.rootFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool maxDiskUsageSpecified
        {
            get
            {
                return this.maxDiskUsageFieldSpecified;
            }
            set
            {
                this.maxDiskUsageFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool strategySpecified
        {
            get
            {
                return this.strategyFieldSpecified;
            }
            set
            {
                this.strategyFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool modalityRuleSetSpecified
        {
            get
            {
                return this.modalityRuleSetFieldSpecified;
            }
            set
            {
                this.modalityRuleSetFieldSpecified = value;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current simpleDICOMStorageListenersListenerStorage object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an simpleDICOMStorageListenersListenerStorage object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output simpleDICOMStorageListenersListenerStorage object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out simpleDICOMStorageListenersListenerStorage obj, out System.Exception exception)
        {
            exception = null;
            obj = default(simpleDICOMStorageListenersListenerStorage);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out simpleDICOMStorageListenersListenerStorage obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static simpleDICOMStorageListenersListenerStorage Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((simpleDICOMStorageListenersListenerStorage)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static simpleDICOMStorageListenersListenerStorage Deserialize(System.IO.Stream s)
        {
            return ((simpleDICOMStorageListenersListenerStorage)(Serializer.Deserialize(s)));
        }

        /// <summary>
        /// Serializes current simpleDICOMStorageListenersListenerStorage object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an simpleDICOMStorageListenersListenerStorage object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output simpleDICOMStorageListenersListenerStorage object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out simpleDICOMStorageListenersListenerStorage obj, out System.Exception exception)
        {
            exception = null;
            obj = default(simpleDICOMStorageListenersListenerStorage);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out simpleDICOMStorageListenersListenerStorage obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static simpleDICOMStorageListenersListenerStorage LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class simpleDICOMStorageSopClassSet
    {

        private List<simpleDICOMStorageSopClassSetSopClass> sopClassField;

        private string nameField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        private bool sopClassFieldSpecified;

        private bool nameFieldSpecified;

        public simpleDICOMStorageSopClassSet()
        {
            this.sopClassField = new List<simpleDICOMStorageSopClassSetSopClass>();
        }

        [System.Xml.Serialization.XmlElementAttribute("sopClass")]
        public List<simpleDICOMStorageSopClassSetSopClass> sopClass
        {
            get
            {
                return this.sopClassField;
            }
            set
            {
                this.sopClassField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(simpleDICOMStorageSopClassSet));
                }
                return serializer;
            }
        }

        [XmlIgnore()]
        public bool sopClassSpecified
        {
            get
            {
                return this.sopClassFieldSpecified;
            }
            set
            {
                this.sopClassFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool nameSpecified
        {
            get
            {
                return this.nameFieldSpecified;
            }
            set
            {
                this.nameFieldSpecified = value;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current simpleDICOMStorageSopClassSet object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an simpleDICOMStorageSopClassSet object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output simpleDICOMStorageSopClassSet object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out simpleDICOMStorageSopClassSet obj, out System.Exception exception)
        {
            exception = null;
            obj = default(simpleDICOMStorageSopClassSet);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out simpleDICOMStorageSopClassSet obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static simpleDICOMStorageSopClassSet Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((simpleDICOMStorageSopClassSet)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static simpleDICOMStorageSopClassSet Deserialize(System.IO.Stream s)
        {
            return ((simpleDICOMStorageSopClassSet)(Serializer.Deserialize(s)));
        }

        /// <summary>
        /// Serializes current simpleDICOMStorageSopClassSet object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an simpleDICOMStorageSopClassSet object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output simpleDICOMStorageSopClassSet object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out simpleDICOMStorageSopClassSet obj, out System.Exception exception)
        {
            exception = null;
            obj = default(simpleDICOMStorageSopClassSet);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out simpleDICOMStorageSopClassSet obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static simpleDICOMStorageSopClassSet LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class simpleDICOMStorageSopClassSetSopClass
    {

        private string uidField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        private bool uidFieldSpecified;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string uid
        {
            get
            {
                return this.uidField;
            }
            set
            {
                this.uidField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(simpleDICOMStorageSopClassSetSopClass));
                }
                return serializer;
            }
        }

        [XmlIgnore()]
        public bool uidSpecified
        {
            get
            {
                return this.uidFieldSpecified;
            }
            set
            {
                this.uidFieldSpecified = value;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current simpleDICOMStorageSopClassSetSopClass object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an simpleDICOMStorageSopClassSetSopClass object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output simpleDICOMStorageSopClassSetSopClass object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out simpleDICOMStorageSopClassSetSopClass obj, out System.Exception exception)
        {
            exception = null;
            obj = default(simpleDICOMStorageSopClassSetSopClass);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out simpleDICOMStorageSopClassSetSopClass obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static simpleDICOMStorageSopClassSetSopClass Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((simpleDICOMStorageSopClassSetSopClass)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static simpleDICOMStorageSopClassSetSopClass Deserialize(System.IO.Stream s)
        {
            return ((simpleDICOMStorageSopClassSetSopClass)(Serializer.Deserialize(s)));
        }

        /// <summary>
        /// Serializes current simpleDICOMStorageSopClassSetSopClass object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an simpleDICOMStorageSopClassSetSopClass object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output simpleDICOMStorageSopClassSetSopClass object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out simpleDICOMStorageSopClassSetSopClass obj, out System.Exception exception)
        {
            exception = null;
            obj = default(simpleDICOMStorageSopClassSetSopClass);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out simpleDICOMStorageSopClassSetSopClass obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static simpleDICOMStorageSopClassSetSopClass LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class simpleDICOMStorageModalityRuleSet
    {

        private List<simpleDICOMStorageModalityRuleSetModalityRule> modalityRuleField;

        private string nameField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        private bool modalityRuleFieldSpecified;

        private bool nameFieldSpecified;

        public simpleDICOMStorageModalityRuleSet()
        {
            this.modalityRuleField = new List<simpleDICOMStorageModalityRuleSetModalityRule>();
        }

        [System.Xml.Serialization.XmlElementAttribute("modalityRule")]
        public List<simpleDICOMStorageModalityRuleSetModalityRule> modalityRule
        {
            get
            {
                return this.modalityRuleField;
            }
            set
            {
                this.modalityRuleField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(simpleDICOMStorageModalityRuleSet));
                }
                return serializer;
            }
        }

        [XmlIgnore()]
        public bool modalityRuleSpecified
        {
            get
            {
                return this.modalityRuleFieldSpecified;
            }
            set
            {
                this.modalityRuleFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool nameSpecified
        {
            get
            {
                return this.nameFieldSpecified;
            }
            set
            {
                this.nameFieldSpecified = value;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current simpleDICOMStorageModalityRuleSet object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an simpleDICOMStorageModalityRuleSet object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output simpleDICOMStorageModalityRuleSet object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out simpleDICOMStorageModalityRuleSet obj, out System.Exception exception)
        {
            exception = null;
            obj = default(simpleDICOMStorageModalityRuleSet);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out simpleDICOMStorageModalityRuleSet obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static simpleDICOMStorageModalityRuleSet Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((simpleDICOMStorageModalityRuleSet)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static simpleDICOMStorageModalityRuleSet Deserialize(System.IO.Stream s)
        {
            return ((simpleDICOMStorageModalityRuleSet)(Serializer.Deserialize(s)));
        }

        /// <summary>
        /// Serializes current simpleDICOMStorageModalityRuleSet object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an simpleDICOMStorageModalityRuleSet object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output simpleDICOMStorageModalityRuleSet object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out simpleDICOMStorageModalityRuleSet obj, out System.Exception exception)
        {
            exception = null;
            obj = default(simpleDICOMStorageModalityRuleSet);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out simpleDICOMStorageModalityRuleSet obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static simpleDICOMStorageModalityRuleSet LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class simpleDICOMStorageModalityRuleSetModalityRule
    {

        private string modalityField;

        private string ratioField;

        private string actionField;

        private string outputTransferSyntaxField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        private bool modalityFieldSpecified;

        private bool ratioFieldSpecified;

        private bool actionFieldSpecified;

        private bool outputTransferSyntaxFieldSpecified;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string modality
        {
            get
            {
                return this.modalityField;
            }
            set
            {
                this.modalityField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ratio
        {
            get
            {
                return this.ratioField;
            }
            set
            {
                this.ratioField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string action
        {
            get
            {
                return this.actionField;
            }
            set
            {
                this.actionField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string outputTransferSyntax
        {
            get
            {
                return this.outputTransferSyntaxField;
            }
            set
            {
                this.outputTransferSyntaxField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(simpleDICOMStorageModalityRuleSetModalityRule));
                }
                return serializer;
            }
        }

        [XmlIgnore()]
        public bool modalitySpecified
        {
            get
            {
                return this.modalityFieldSpecified;
            }
            set
            {
                this.modalityFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool ratioSpecified
        {
            get
            {
                return this.ratioFieldSpecified;
            }
            set
            {
                this.ratioFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool actionSpecified
        {
            get
            {
                return this.actionFieldSpecified;
            }
            set
            {
                this.actionFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool outputTransferSyntaxSpecified
        {
            get
            {
                return this.outputTransferSyntaxFieldSpecified;
            }
            set
            {
                this.outputTransferSyntaxFieldSpecified = value;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current simpleDICOMStorageModalityRuleSetModalityRule object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an simpleDICOMStorageModalityRuleSetModalityRule object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output simpleDICOMStorageModalityRuleSetModalityRule object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out simpleDICOMStorageModalityRuleSetModalityRule obj, out System.Exception exception)
        {
            exception = null;
            obj = default(simpleDICOMStorageModalityRuleSetModalityRule);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out simpleDICOMStorageModalityRuleSetModalityRule obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static simpleDICOMStorageModalityRuleSetModalityRule Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((simpleDICOMStorageModalityRuleSetModalityRule)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static simpleDICOMStorageModalityRuleSetModalityRule Deserialize(System.IO.Stream s)
        {
            return ((simpleDICOMStorageModalityRuleSetModalityRule)(Serializer.Deserialize(s)));
        }

        /// <summary>
        /// Serializes current simpleDICOMStorageModalityRuleSetModalityRule object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an simpleDICOMStorageModalityRuleSetModalityRule object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output simpleDICOMStorageModalityRuleSetModalityRule object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out simpleDICOMStorageModalityRuleSetModalityRule obj, out System.Exception exception)
        {
            exception = null;
            obj = default(simpleDICOMStorageModalityRuleSetModalityRule);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out simpleDICOMStorageModalityRuleSetModalityRule obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static simpleDICOMStorageModalityRuleSetModalityRule LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class simpleDICOMStorageStorageStrategy
    {

        private List<simpleDICOMStorageStorageStrategyDirectory> directoriesField;

        private simpleDICOMStorageStorageStrategyFiles filesField;

        private string nameField;

        private bool useDateSubDirectoriesField;

        private bool useDateSubDirectoriesFieldSpecified;

        private static System.Xml.Serialization.XmlSerializer serializer;

        private bool directoriesFieldSpecified;

        private bool filesFieldSpecified;

        private bool nameFieldSpecified;

        public simpleDICOMStorageStorageStrategy()
        {
            this.filesField = new simpleDICOMStorageStorageStrategyFiles();
            this.directoriesField = new List<simpleDICOMStorageStorageStrategyDirectory>();
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("directory", IsNullable = false)]
        public List<simpleDICOMStorageStorageStrategyDirectory> directories
        {
            get
            {
                return this.directoriesField;
            }
            set
            {
                this.directoriesField = value;
            }
        }

        public simpleDICOMStorageStorageStrategyFiles files
        {
            get
            {
                return this.filesField;
            }
            set
            {
                this.filesField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool useDateSubDirectories
        {
            get
            {
                return this.useDateSubDirectoriesField;
            }
            set
            {
                this.useDateSubDirectoriesField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool useDateSubDirectoriesSpecified
        {
            get
            {
                return this.useDateSubDirectoriesFieldSpecified;
            }
            set
            {
                this.useDateSubDirectoriesFieldSpecified = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(simpleDICOMStorageStorageStrategy));
                }
                return serializer;
            }
        }

        [XmlIgnore()]
        public bool directoriesSpecified
        {
            get
            {
                return this.directoriesFieldSpecified;
            }
            set
            {
                this.directoriesFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool filesSpecified
        {
            get
            {
                return this.filesFieldSpecified;
            }
            set
            {
                this.filesFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool nameSpecified
        {
            get
            {
                return this.nameFieldSpecified;
            }
            set
            {
                this.nameFieldSpecified = value;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current simpleDICOMStorageStorageStrategy object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an simpleDICOMStorageStorageStrategy object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output simpleDICOMStorageStorageStrategy object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out simpleDICOMStorageStorageStrategy obj, out System.Exception exception)
        {
            exception = null;
            obj = default(simpleDICOMStorageStorageStrategy);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out simpleDICOMStorageStorageStrategy obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static simpleDICOMStorageStorageStrategy Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((simpleDICOMStorageStorageStrategy)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static simpleDICOMStorageStorageStrategy Deserialize(System.IO.Stream s)
        {
            return ((simpleDICOMStorageStorageStrategy)(Serializer.Deserialize(s)));
        }

        /// <summary>
        /// Serializes current simpleDICOMStorageStorageStrategy object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an simpleDICOMStorageStorageStrategy object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output simpleDICOMStorageStorageStrategy object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out simpleDICOMStorageStorageStrategy obj, out System.Exception exception)
        {
            exception = null;
            obj = default(simpleDICOMStorageStorageStrategy);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out simpleDICOMStorageStorageStrategy obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static simpleDICOMStorageStorageStrategy LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class simpleDICOMStorageStorageStrategyDirectory
    {

        private string nameField;

        private string tagField;

        private string defaultValField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        private bool nameFieldSpecified;

        private bool tagFieldSpecified;

        private bool defaultValFieldSpecified;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string tag
        {
            get
            {
                return this.tagField;
            }
            set
            {
                this.tagField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string defaultVal
        {
            get
            {
                return this.defaultValField;
            }
            set
            {
                this.defaultValField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(simpleDICOMStorageStorageStrategyDirectory));
                }
                return serializer;
            }
        }

        [XmlIgnore()]
        public bool nameSpecified
        {
            get
            {
                return this.nameFieldSpecified;
            }
            set
            {
                this.nameFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool tagSpecified
        {
            get
            {
                return this.tagFieldSpecified;
            }
            set
            {
                this.tagFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool defaultValSpecified
        {
            get
            {
                return this.defaultValFieldSpecified;
            }
            set
            {
                this.defaultValFieldSpecified = value;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current simpleDICOMStorageStorageStrategyDirectory object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an simpleDICOMStorageStorageStrategyDirectory object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output simpleDICOMStorageStorageStrategyDirectory object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out simpleDICOMStorageStorageStrategyDirectory obj, out System.Exception exception)
        {
            exception = null;
            obj = default(simpleDICOMStorageStorageStrategyDirectory);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out simpleDICOMStorageStorageStrategyDirectory obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static simpleDICOMStorageStorageStrategyDirectory Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((simpleDICOMStorageStorageStrategyDirectory)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static simpleDICOMStorageStorageStrategyDirectory Deserialize(System.IO.Stream s)
        {
            return ((simpleDICOMStorageStorageStrategyDirectory)(Serializer.Deserialize(s)));
        }

        /// <summary>
        /// Serializes current simpleDICOMStorageStorageStrategyDirectory object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an simpleDICOMStorageStorageStrategyDirectory object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output simpleDICOMStorageStorageStrategyDirectory object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out simpleDICOMStorageStorageStrategyDirectory obj, out System.Exception exception)
        {
            exception = null;
            obj = default(simpleDICOMStorageStorageStrategyDirectory);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out simpleDICOMStorageStorageStrategyDirectory obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static simpleDICOMStorageStorageStrategyDirectory LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class simpleDICOMStorageStorageStrategyFiles
    {

        private string extensionField;

        private bool overwriteField;

        private string tagField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        private bool extensionFieldSpecified;

        private bool overwriteFieldSpecified;

        private bool tagFieldSpecified;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string extension
        {
            get
            {
                return this.extensionField;
            }
            set
            {
                this.extensionField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool overwrite
        {
            get
            {
                return this.overwriteField;
            }
            set
            {
                this.overwriteField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string tag
        {
            get
            {
                return this.tagField;
            }
            set
            {
                this.tagField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(simpleDICOMStorageStorageStrategyFiles));
                }
                return serializer;
            }
        }

        [XmlIgnore()]
        public bool extensionSpecified
        {
            get
            {
                return this.extensionFieldSpecified;
            }
            set
            {
                this.extensionFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool overwriteSpecified
        {
            get
            {
                return this.overwriteFieldSpecified;
            }
            set
            {
                this.overwriteFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool tagSpecified
        {
            get
            {
                return this.tagFieldSpecified;
            }
            set
            {
                this.tagFieldSpecified = value;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current simpleDICOMStorageStorageStrategyFiles object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an simpleDICOMStorageStorageStrategyFiles object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output simpleDICOMStorageStorageStrategyFiles object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out simpleDICOMStorageStorageStrategyFiles obj, out System.Exception exception)
        {
            exception = null;
            obj = default(simpleDICOMStorageStorageStrategyFiles);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out simpleDICOMStorageStorageStrategyFiles obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static simpleDICOMStorageStorageStrategyFiles Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((simpleDICOMStorageStorageStrategyFiles)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static simpleDICOMStorageStorageStrategyFiles Deserialize(System.IO.Stream s)
        {
            return ((simpleDICOMStorageStorageStrategyFiles)(Serializer.Deserialize(s)));
        }

        /// <summary>
        /// Serializes current simpleDICOMStorageStorageStrategyFiles object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an simpleDICOMStorageStorageStrategyFiles object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output simpleDICOMStorageStorageStrategyFiles object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out simpleDICOMStorageStorageStrategyFiles obj, out System.Exception exception)
        {
            exception = null;
            obj = default(simpleDICOMStorageStorageStrategyFiles);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out simpleDICOMStorageStorageStrategyFiles obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static simpleDICOMStorageStorageStrategyFiles LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
}
